set -x
#echo $# $0 $1 $2 $3
fn=$1
shift
param=$1

case $fn in
    gosh_help_data)
        util=$param;;
    display_man_page)
        util=help;;
    set_args)
        input=$@;
        opt_string=`cat run/optstring`;
        pool=`cat run/pool`;
        util=gosh;;
    set_gosh_vars)
        profile=`cat etc/profile`;
        util=gosh;;
    build_exec_pipeline)
        args=`cat run/args`;
        gosh_vars=`cat run/gosh_vars`;
        comp_spec=`cat run/comp_spec`;
        pool=`cat run/pool`;
        util=gosh;;
    *)
        util=gosh;;
esac

abi=build/$util.abi.json
boc=bin/$util.boc

args() {
   case $fn in
        set_args)
            jq -n -r --arg v "$input" --arg v1 "$opt_string" --arg v2 "$pool" '{s_input: $v, opt_string: $v1, pool: $v2}';;
        set_gosh_vars)
            jq -n -r --arg v "$profile" '{profile: $v}';;
        build_exec_pipeline)
            jq -n -r --arg v "$args" --arg v1 "$gosh_vars" --arg v2 "$comp_spec" --arg v3 "$pool" '{args: $v, gosh_vars: $v1, comp_spec: $v2, pool: $v3}';;
        terse)
            jq -n -r --arg v "$args" --arg v1 "$hashes" --arg v2 "$index" --arg v3 "$pool" '{args: $v, hashes: $v1, index: $v2, pool: $v3}';;
        exec|b_exec)
            jq '{e: .}' run/env >tmp/shell_in;
            jq -s 'add' tmp/shell_in run/fs;;
        display_man_page)
            jq -n -r --rawfile v run/args --slurpfile v1 usr/share/man_pages '{args: $v, help_files: $v1}';;
        *)
            echo '{}';;
    esac
}

filter() {
    case $fn in
        set_args)
            jq -r '.ec' $1 >run/ec;
            jq -r '.out' $1 >run/args;;
        set_gosh_vars)
            jq -r '.ec' $1 >run/ec;
            jq -r '.out' $1 >run/gosh_vars;;
        build_exec_pipeline)
            jq -r '.ec' $1 >run/ec;
            jq -r '.out' $1 >run/exec_pipeline;
            chmod +x run/exec_pipeline;;
        terse)
            jq -r '.ec' $1 >run/ec;
            jq -r '.out' $1 >run/command_type;;
        gosh_help_data)
            cp $1 usr/share/$util.man;;
        display_man_page)
            jq -rj '.out' $1 >run/stdout;;
        display_help|b_exec)
            cp $1 tmp/post_b_exec;;
        *)
            ;;
    esac
}

args >tmp/${util}_$fn.args
~/bin/tonos-cli -j run --boc $boc --abi $abi $fn tmp/${util}_$fn.args >tmp/${util}_$fn.out
filter tmp/${util}_$fn.out
