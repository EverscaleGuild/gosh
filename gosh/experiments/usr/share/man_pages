{
  "name": "gosh",
  "purpose": "generic on-chain source holder from decentralized hell",
  "synopsis": "[--version] [--help] [-C <path>] [-c <name>=<value>]\n[--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\n[-p|--paginate|-P|--no-pager] [--no-replace-objects] [--bare]\n[--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]\n[--super-prefix=<path>]\n<command> [<args>]",
  "description": "Gosh is a sluggish, no-so-scalable-yet, potentially ubiquitous source control system\nwith an obscenely rich command set that provides both high-level operations and full access to internals.\nSome sunny day see goshtutorial(7) to get started, then see gosheveryday(7) for a useful minimum set of commands.\nAfter you mastered the basic concepts, you can come back to this page to learn what commands Gosh offers. You can\nlearn more about individual Gosh commands with \"gosh help command\". goshcli(7) manual page gives you an overview\nof the command-line command syntax.",
  "options": "--version   Prints the Git suite version that the git program came from.\n--help      Prints the synopsis and a list of the most commonly used commands. If the option --all or -a is given then all\n            available commands are printed. If a Git command is named this option will bring up the manual page for that command.",
  "headers": [
    "GOSH COMMANDS",
    "ENVIRONMENT VARIABLES"
  ],
  "contents": [
    " Main porcelain commands\ngit-add(1)      Add file contents to the index.\ngit-am(1)       Apply a series of patches from a mailbox.\ngit-archive(1)  Create an archive of files from a named tree.\ngit-bisect(1)   Use binary search to find the commit that introduced a bug.\ngit-branch(1)   List, create, or delete branches.\ngit-bundle(1)   Move objects and refs by archive.\ngit-checkout(1) Switch branches or restore working tree files.\ngit-cherry-pick(1) Apply the changes introduced by some existing commits.\ngit-citool(1)   Graphical alternative to git-commit.\ngit-clean(1)    Remove untracked files from the working tree.\ngit-clone(1)    Clone a repository into a new directory.\ngit-commit(1)   Record changes to the repository.\ngit-describe(1) Give an object a human readable name based on an available ref.",
    "Various Git commands use the following environment variables:\nThe Git Repository\nThese environment variables apply to all core Git commands. Nb: it is worth noting that they may be used/overridden by SCMS sitting\nabove Git so take care if using a foreign front-end.\nGIT_INDEX_FILE\n    This environment allows the specification of an alternate index file. If not specified, the default of $GIT_DIR/index is used.\nGIT_INDEX_VERSION\n    This environment variable allows the specification of an index version for new repositories. It wonâ€™t affect existing index files.\n    By default index file version 2 or 3 is used. See git-update-index(1) for more information.\nGIT_OBJECT_DIRECTORY\n    If the object storage directory is specified via this environment variable then the sha1 directories are created underneath -\n    otherwise the default $GIT_DIR/objects directory is used.\nGIT_ALTERNATE_OBJECT_DIRECTORIES\n    Due to the immutable nature of Git objects, old objects can be archived into shared, read-only directories. This variable specifies\n    a \":\" separated (on Windows \";\" separated) list of Git object directories which can be used to search for Git objects. New objects\n    will not be written to these directories.\n    Entries that begin with \" (double-quote) will be interpreted as C-style quoted paths, removing leading and trailing double-quotes\n    and respecting backslash escapes. E.g., the value \"path-with-\"-and-:-in-it\":vanilla-path has two paths: path-with-\"-and-:-in-it\n    and vanilla-path.\nGIT_DIR\n    If the GIT_DIR environment variable is set then it specifies a path to use instead of the default .git for the base of the\n    repository. The --git-dir command-line option also sets this value.\nGIT_WORK_TREE\n    Set the path to the root of the working tree. This can also be controlled by the --work-tree command-line option and the\n    core.worktree configuration variable."
  ],
  "see_also": "gittutorial(7), gittutorial-2(7), giteveryday(7), gitcvs-migration(7), gitglossary(7), gitcore-tutorial(7), gitcli(7), gitworkflows(7)",
  "version": "0.01"
}
{
  "name": "help",
  "purpose": "Display help information about Gosh",
  "synopsis": "[-a|--all [--[no-]verbose]] [-g|--guide] [-i|--info|-m|--man|-w|--web] [COMMAND|GUIDE]",
  "description": "With no options and no COMMAND or GUIDE given, the synopsis of the git command and a list of the most commonly used Git commands are\nprinted on the standard output.\n\nIf the option --all or -a is given, all available commands are printed on the standard output.\n\nIf the option --guide or -g is given, a list of the useful Git guides is also printed on the standard output.\n\nIf a command, or a guide, is given, a manual page for that command or guide is brought up. The man program is used by default for this\npurpose, but this can be overridden by other options or configuration variables.\n\nIf an alias is given, git shows the definition of the alias on standard output. To get the manual page for the aliased command, use git\nCOMMAND --help.\n\nNote that git --help ... is identical to git help ... because the former is internally converted into the latter.\nTo display the git(1) man page, use git help git.\n\nThis page can be displayed with git help help or git help --help",
  "options": "-a, --all       Prints all the available commands on the standard output. This option overrides any given command or guide name.\n--verbose       When used with --all print description for all recognized commands. This is the default.\n-c, --config    List all available configuration variables. This is a short summary of the list in git-config(1).",
  "headers": [
    "CONFIGURATION VARIABLES"
  ],
  "contents": [
    "help.format If no command-line option is passed, the help.format configuration variable will be checked. The following values are supported for this variable; they make git help behave as their corresponding command- line option:\n man corresponds to -m|--man,\n info corresponds to -i|--info,\n web or html correspond to -w|--web."
  ],
  "see_also": "",
  "version": "0.01"
}
{
  "name": "type",
  "purpose": "",
  "synopsis": "Display information about command type.",
  "description": "For each NAME, indicate how it would be interpreted if used as a command name.",
  "options": "",
  "headers": [],
  "contents": [],
  "see_also": "",
  "version": "0.01"
}
{
  "name": "git-var",
  "purpose": "Show a Git logical variable",
  "synopsis": "( -l | <variable> )",
  "description": "Prints a Git logical variable.",
  "options": "-l     Cause the logical variables to be listed. In addition, all the variables of the Git configuration file .git/config are listed as\n        well. (However, the configuration variables listing functionality is deprecated in favor of git config -l.)",
  "headers": [
    "EXAMPLES",
    "VARIABLES"
  ],
  "contents": [
    "$ git var GIT_AUTHOR_IDENT    Eric W. Biederman <ebiederm@lnxi.com> 1121223278 -0600",
    "GIT_AUTHOR_IDENT       The author of a piece of code.\nGIT_COMMITTER_IDENT     The person who put a piece of code into Git.\nGIT_EDITOR              Text editor for use by Git commands. The value is meant to be interpreted by the shell when it is used. Examples: ~/bin/vi,\n                        $SOME_ENVIRONMENT_VARIABLE, \"C:\\Program Files\\Vim\\gvim.exe\" --nofork. The order of preference is the $GIT_EDITOR environment\n                        variable, then core.editor configuration, then $VISUAL, then $EDITOR, and then the default chosen at compile time, which is usually\n                        vi. The build you are using chose editor as the default.\nGIT_PAGER               Text viewer for use by Git commands (e.g., less). The value is meant to be interpreted by the shell. The order of preference is the\n                        $GIT_PAGER environment variable, then core.pager configuration, then $PAGER, and then the default chosen at compile time (usually\n                        less). The build you are using chose pager as the default."
  ],
  "see_also": "git-commit-tree(1) git-tag(1) git-config(1)",
  "version": "0.01"
}
