//@ts-check
const { promises: fs } = require('fs')
const { verbose, setVerboseFlag } = require('./utils')
const { saveToIPFS, loadFromIPFS } = require('./ipfs-http')

async function main() {
    setVerboseFlag(3)

    verbose(`start polygon`)

    {
        // can be generated by `find . -type f | head -n 100` or similar
        const files = `
./node_modules/ipfs-core/cjs/src/utils.js
./node_modules/ipfs-core/cjs/src/ipns/index.js
./node_modules/ipfs-core/cjs/src/ipns/publisher.js
./node_modules/ipfs-core/cjs/src/ipns/routing/pubsub-datastore.js
./node_modules/ipfs-core/cjs/src/ipns/routing/config.js
./node_modules/ipfs-core/cjs/src/ipns/routing/dht-datastore.js
./node_modules/ipfs-core/cjs/src/ipns/routing/offline-datastore.js
./node_modules/ipfs-core/cjs/src/ipns/republisher.js
./node_modules/ipfs-core/cjs/src/ipns/resolver.js
./node_modules/it-merge/test.js
./node_modules/it-merge/dist/index.d.ts
./node_modules/it-merge/dist/index.d.ts.map
./node_modules/it-merge/index.js
./node_modules/it-merge/README.md
./node_modules/it-merge/package.json
./node_modules/it-merge/tsconfig.json
./node_modules/jsbn/.npmignore
./node_modules/jsbn/LICENSE
./node_modules/jsbn/test/es6-import.js
./node_modules/jsbn/CHANGELOG.md
./node_modules/jsbn/index.js
./node_modules/jsbn/README.md
            `;
        const filenames = Array.from(files.matchAll(/\S+(?=\n)/g), (x) => x[0])

        let cids = await Promise.all(
            filenames.map(async (name) => saveToIPFS(await fs.readFile(name)))
        )
        cids.map((x) => verbose(x))

        const ress = await Promise.all(cids.map((cid) => loadFromIPFS(cid)))
        ress.map((x) => verbose(`---\n${x.toString()}\n===`))
    }

    {
        let cids = await Promise.all([
            saveToIPFS('1test p2p _j1'),
            saveToIPFS('1test p2p _j2'),
            saveToIPFS('1test p2p _j3'),
            saveToIPFS('1test p2p _j4'),
            saveToIPFS('1test p2p _j5'),
            saveToIPFS('1test p2p _j6'),
            saveToIPFS('1test p2p _j7'),
        ])
        cids.map((x) => verbose(x))
    }

    {
        verbose((await loadFromIPFS('QmeKsxjQ7Ybh7pbwkpTikpH9NxXFyvfJk68WtjbCH9fcD9')).toString())
    }

    process.exit(0)
}

; (async () => { await main(); })()
